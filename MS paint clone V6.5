import tkinter as tk
from tkinter.colorchooser import askcolor
from PIL import ImageGrab
import os
import time

class ToolTip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tipwindow = None
        widget.bind("<Enter>", self.show_tip)
        widget.bind("<Leave>", self.hide_tip)

    def show_tip(self, event=None):
        if self.tipwindow or not self.text:
            return
        x, y, cx, cy = self.widget.bbox("insert")
        x = x + self.widget.winfo_rootx() + 25
        y = y + self.widget.winfo_rooty() + 20
        self.tipwindow = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        label = tk.Label(tw, text=self.text, background="#ffffe0", relief="solid", borderwidth=1,
                         font=("tahoma", "8", "normal"))
        label.pack(ipadx=4, ipady=2)

    def hide_tip(self, event=None):
        if self.tipwindow:
            self.tipwindow.destroy()
        self.tipwindow = None

class PaintApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Paint App - Klippy Style UI")

        self.brush_size = 5
        self.brush_color = "black"
        self.current_tool = "pen"
        self.grid_mode = False
        self.grid_size = 32

        self.canvas_width = 850
        self.canvas_height = 580
        self.zoom_scale = 1.0

        # Data
        self.strokes = []         # Each stroke: list of (x, y)
        self.stroke_options = []  # Each stroke: dict of drawing options
        self.pixel_actions = []   # (row, col, color)
        self.pixel_colors = {}    # (row, col): color

        self.root.geometry("1000x650")
        self.root.configure(bg="#f0f0f0")

        self.toolbar = tk.Frame(root, bg="#d3e0ea", width=120)
        self.toolbar.pack(side="left", fill="y")

        main_frame = tk.Frame(root, bg="#f0f0f0")
        main_frame.pack(side="right", fill="both", expand=True)

        self.top_controls = tk.Frame(main_frame, bg="#f0f0f0", height=50)
        self.top_controls.pack(side="top", fill="x", padx=10, pady=5)

        canvas_frame = tk.Frame(main_frame, bg="#f0f0f0")
        canvas_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.canvas = tk.Canvas(canvas_frame, bg="white", width=self.canvas_width, height=self.canvas_height,
                               relief=tk.SUNKEN, borderwidth=2)
        self.canvas.pack(fill="both", expand=True)

        self.canvas.config(cursor="pencil")

        # Brush size slider in top controls
        size_label = tk.Label(self.top_controls, text="Brush Size:", bg="#f0f0f0", font=("Segoe UI", 10))
        size_label.pack(side="left", padx=(0,5))

        self.brush_slider = tk.Scale(self.top_controls, from_=1, to=30, orient="horizontal", bg="#f0f0f0",
                                     highlightthickness=0, length=150)
        self.brush_slider.set(self.brush_size)
        self.brush_slider.pack(side="left", padx=(0,15))

        # Color chooser button
        self.color_btn = tk.Button(self.top_controls, text="üé® Color", command=self.choose_color,
                                   bg="#4a90e2", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=10, pady=5)
        self.color_btn.pack(side="left", padx=5)

        # Grid mode toggle button
        self.grid_btn = tk.Button(self.top_controls, text="üî≤ Grid Mode", command=self.toggle_grid_mode,
                                   bg="#888", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=10, pady=5)
        self.grid_btn.pack(side="left", padx=5)
        ToolTip(self.grid_btn, "Toggle pixel art grid mode")

        # Undo button
        self.undo_btn = tk.Button(self.top_controls, text="‚Ü∫ Undo", command=self.undo,
                                  bg="#f39c12", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=10, pady=5)
        self.undo_btn.pack(side="left", padx=5)

        # Clear button
        self.clear_btn = tk.Button(self.top_controls, text="üóë Clear", command=self.clear_canvas,
                                   bg="#e74c3c", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=10, pady=5)
        self.clear_btn.pack(side="left", padx=5)

        # Save button
        self.save_btn = tk.Button(self.top_controls, text="üíæ Save", command=self.save_drawing,
                                  bg="#27ae60", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=10, pady=5)
        self.save_btn.pack(side="left", padx=5)

        # --- Zoom controls ---
        self.zoom_out_btn = tk.Button(self.top_controls, text="‚ûñ", command=self.zoom_out,
                                      bg="#aaa", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=6, pady=3)
        self.zoom_out_btn.pack(side="right", padx=2)
        ToolTip(self.zoom_out_btn, "Zoom Out")

        self.zoom_in_btn = tk.Button(self.top_controls, text="‚ûï", command=self.zoom_in,
                                     bg="#aaa", fg="white", font=("Segoe UI", 10), relief=tk.FLAT, padx=6, pady=3)
        self.zoom_in_btn.pack(side="right", padx=2)
        ToolTip(self.zoom_in_btn, "Zoom In")

        self.zoom_label = tk.Label(self.top_controls, text="100%", bg="#f0f0f0", font=("Segoe UI", 10))
        self.zoom_label.pack(side="right", padx=4)

        # Tool buttons in toolbar (vertical)
        self.tool_buttons = {}
        tools = [
            ("pen", "‚úèÔ∏è", "Pen: solid line"),
            ("paintbrush", "üñåÔ∏è", "Paintbrush: thick smooth"),
            ("watercolor", "üíß", "Watercolor: transparent"),
            ("marker", "üñçÔ∏è", "Marker: translucent"),
            ("crayon", "üñçÔ∏è", "Crayon: rough edges"),
            ("eraser", "‚ùå", "Eraser: remove paint")
        ]

        for tool, emoji, tip in tools:
            b = tk.Button(self.toolbar, text=emoji, font=("Segoe UI Emoji", 20),
                          width=4, height=2,
                          relief=tk.RAISED, bg="#d3e0ea",
                          command=lambda t=tool: self.select_tool(t))
            b.pack(pady=8)
            ToolTip(b, tip)
            self.tool_buttons[tool] = b

        self.update_tool_buttons()
        self.bind_canvas_events()
        self.redraw_all()

        # For freehand stroke
        self.old_x = None
        self.old_y = None
        self.current_points = []

    def bind_canvas_events(self):
        if self.grid_mode:
            self.canvas.config(cursor="hand2")
            self.canvas.bind("<ButtonPress-1>", self.pixel_click)
            self.canvas.unbind("<B1-Motion>")
            self.canvas.unbind("<ButtonRelease-1>")
        else:
            self.canvas.config(cursor="pencil")
            self.canvas.bind("<ButtonPress-1>", self.start_stroke)
            self.canvas.bind("<B1-Motion>", self.paint)
            self.canvas.bind("<ButtonRelease-1>", self.end_stroke)

    # --- ZOOM METHODS ---
    def zoom_in(self):
        self.set_zoom(self.zoom_scale * 1.25)

    def zoom_out(self):
        self.set_zoom(self.zoom_scale / 1.25)

    def set_zoom(self, new_zoom):
        new_zoom = max(0.25, min(new_zoom, 8.0))
        if abs(new_zoom - self.zoom_scale) < 0.01:
            return
        self.zoom_scale = new_zoom
        self.zoom_label.config(text=f"{int(self.zoom_scale * 100)}%")
        new_w = int(self.canvas_width * self.zoom_scale)
        new_h = int(self.canvas_height * self.zoom_scale)
        self.canvas.config(width=new_w, height=new_h)
        self.redraw_all()

    # --- GRID MODE ---
    def toggle_grid_mode(self):
        self.grid_mode = not self.grid_mode
        if self.grid_mode:
            self.grid_btn.config(bg="#27ae60")
        else:
            self.grid_btn.config(bg="#888")
        self.bind_canvas_events()
        self.redraw_all()

    def draw_grid(self):
        w = self.canvas_width
        h = self.canvas_height
        rows = cols = self.grid_size
        cell_w = w / cols
        cell_h = h / rows
        for i in range(rows):
            for j in range(cols):
                x0, y0 = j*cell_w, i*cell_h
                x1, y1 = x0+cell_w, y0+cell_h
                # scale for zoom
                x0z, y0z, x1z, y1z = [v * self.zoom_scale for v in (x0, y0, x1, y1)]
                self.canvas.create_rectangle(x0z, y0z, x1z, y1z, outline="#cccccc", fill="white", tags="gridbg")
        # Fill pixels
        for (row, col), color in self.pixel_colors.items():
            if color and color != "white":
                x0, y0 = col*cell_w, row*cell_h
                x1, y1 = x0+cell_w, y0+cell_h
                x0z, y0z, x1z, y1z = [v * self.zoom_scale for v in (x0, y0, x1, y1)]
                self.canvas.create_rectangle(x0z, y0z, x1z, y1z, outline="#cccccc", fill=color, tags="gridfill")

    def pixel_click(self, event):
        # Convert from zoomed to logical coordinates
        zx, zy = event.x, event.y
        x, y = zx / self.zoom_scale, zy / self.zoom_scale
        w = self.canvas_width
        h = self.canvas_height
        rows = cols = self.grid_size
        cell_w = w / cols
        cell_h = h / rows
        col = int(x // cell_w)
        row = int(y // cell_h)
        if 0 <= row < rows and 0 <= col < cols:
            color = "white" if self.current_tool == "eraser" else self.brush_color
            self.pixel_colors[(row, col)] = color
            self.pixel_actions.append((row, col, color))
            self.redraw_all()

    # --- FREEHAND TOOLS ---
    def select_tool(self, tool):
        self.current_tool = tool
        self.update_tool_buttons()
        if self.grid_mode:
            self.canvas.config(cursor="hand2")
        else:
            cursor_map = {
                "pen": "pencil",
                "paintbrush": "dotbox",
                "watercolor": "circle",
                "marker": "plus",
                "crayon": "cross",
                "eraser": "spraycan"
            }
            self.canvas.config(cursor=cursor_map.get(tool, "pencil"))

    def update_tool_buttons(self):
        for t, btn in self.tool_buttons.items():
            if t == self.current_tool:
                btn.config(relief=tk.SUNKEN, bg="#82c4e6")
            else:
                btn.config(relief=tk.RAISED, bg="#d3e0ea")

    def start_stroke(self, event):
        if self.grid_mode:
            return
        zx, zy = event.x, event.y
        x, y = zx / self.zoom_scale, zy / self.zoom_scale
        self.old_x = x
        self.old_y = y
        self.current_points = [(x, y)]

    def paint(self, event):
        if self.grid_mode or self.old_x is None or self.old_y is None:
            return
        zx, zy = event.x, event.y
        x, y = zx / self.zoom_scale, zy / self.zoom_scale
        self.current_points.append((x, y))
        # Draw current stroke for preview
        self.redraw_all(current_temp_stroke=(self.current_points, self.get_current_options()))

    def end_stroke(self, event):
        if self.grid_mode or self.old_x is None or self.old_y is None or not self.current_points:
            self.old_x = None
            self.old_y = None
            self.current_points = []
            return
        # Commit the stroke
        self.strokes.append(self.current_points[:])
        self.stroke_options.append(self.get_current_options())
        self.old_x = None
        self.old_y = None
        self.current_points = []
        self.redraw_all()

    def get_current_options(self):
        size = self.brush_slider.get()
        color = self.brush_color
        options = {}
        if self.current_tool == "pen":
            options = dict(width=size, fill=color, capstyle=tk.ROUND, smooth=True)
        elif self.current_tool == "paintbrush":
            options = dict(width=size*2, fill=color, capstyle=tk.ROUND, smooth=True)
        elif self.current_tool == "watercolor":
            options = dict(width=int(size*1.5), fill=color, capstyle=tk.ROUND, smooth=True, stipple="gray25")
        elif self.current_tool == "marker":
            options = dict(width=size*2, fill=color, capstyle=tk.ROUND, smooth=True, stipple="gray50")
        elif self.current_tool == "crayon":
            options = dict(width=size, fill=color, capstyle=tk.ROUND, smooth=True)
        elif self.current_tool == "eraser":
            options = dict(width=size*3, fill="white", capstyle=tk.ROUND, smooth=True)
        else:
            options = dict(width=size, fill=color, capstyle=tk.ROUND, smooth=True)
        return options

    def choose_color(self):
        color = askcolor(color=self.brush_color)[1]
        if color:
            self.brush_color = color
            self.color_btn.config(bg=color)

    def clear_canvas(self):
        self.strokes.clear()
        self.stroke_options.clear()
        self.pixel_colors.clear()
        self.pixel_actions.clear()
        self.redraw_all()

    def undo(self):
        if self.grid_mode:
            # Undo last colored pixel
            while self.pixel_actions:
                row, col, color = self.pixel_actions.pop()
                # Remove only the last pixel action
                prev = None
                for idx in range(len(self.pixel_actions)-1, -1, -1):
                    if self.pixel_actions[idx][:2] == (row, col):
                        prev = self.pixel_actions[idx][2]
                        break
                if prev is not None:
                    self.pixel_colors[(row, col)] = prev
                else:
                    self.pixel_colors.pop((row, col), None)
                break
        else:
            # Remove last stroke (not just segment!)
            if self.strokes:
                self.strokes.pop()
                self.stroke_options.pop()
        self.redraw_all()

    def redraw_all(self, current_temp_stroke=None):
        self.canvas.delete("all")
        # Draw grid only if in grid mode
        if self.grid_mode:
            self.draw_grid()
        else:
            # Draw filled pixels (but not the grid lines)
            w = self.canvas_width
            h = self.canvas_height
            rows = cols = self.grid_size
            cell_w = w / cols
            cell_h = h / rows
            for (row, col), color in self.pixel_colors.items():
                if color and color != "white":
                    x0, y0 = col*cell_w, row*cell_h
                    x1, y1 = x0+cell_w, y0+cell_h
                    x0z, y0z, x1z, y1z = [v * self.zoom_scale for v in (x0, y0, x1, y1)]
                    self.canvas.create_rectangle(x0z, y0z, x1z, y1z, outline="", fill=color, tags="gridfill")
        # Draw all strokes (lines)
        for stroke, options in zip(self.strokes, self.stroke_options):
            if len(stroke) > 1:
                points = []
                for x, y in stroke:
                    points.extend([x * self.zoom_scale, y * self.zoom_scale])
                opts = dict(options)
                opts["width"] = options.get("width", 1) * self.zoom_scale  # Scale thickness with zoom
                self.canvas.create_line(*points, **opts)
        # Draw the current in-progress stroke (if any, for live preview)
        if current_temp_stroke:
            stroke, options = current_temp_stroke
            if len(stroke) > 1:
                points = []
                for x, y in stroke:
                    points.extend([x * self.zoom_scale, y * self.zoom_scale])
                opts = dict(options)
                opts["width"] = options.get("width", 1) * self.zoom_scale
                self.canvas.create_line(*points, **opts)

    def save_drawing(self):
        x = self.root.winfo_rootx() + self.canvas.winfo_x()
        y = self.root.winfo_rooty() + self.canvas.winfo_y()
        x1 = x + self.canvas.winfo_width()
        y1 = y + self.canvas.winfo_height()
        img = ImageGrab.grab(bbox=(x, y, x1, y1))
        save_dir = os.path.expanduser("~/Pictures")
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        filename = os.path.join(save_dir, f"drawing_{int(time.time())}.png")
        img.save(filename)
        print(f"Saved drawing as {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PaintApp(root)
    root.mainloop()
